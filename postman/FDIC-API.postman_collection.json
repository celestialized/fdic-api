{
	"info": {
		"_postman_id": "ad8ab9c9-6c1a-4ffc-9a9a-a56ed7e3aadf",
		"name": "FDIC-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "NORMAL",
			"item": [
				{
					"name": "/banks/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/3150447",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"3150447"
							]
						}
					},
					"response": []
				},
				{
					"name": "/banks/{id} - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/0000000",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"0000000"
							]
						}
					},
					"response": []
				},
				{
					"name": "/banks?asset=",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/getBanks?assets=200,000,000",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"getBanks"
							],
							"query": [
								{
									"key": "assets",
									"value": "200,000,000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/banks?name=",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/getBanks?name=Charles Schwab Bank",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"getBanks"
							],
							"query": [
								{
									"key": "name",
									"value": "Charles Schwab Bank"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/banks?name= - not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/getBanks?name=Charlie Shab Bank",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"getBanks"
							],
							"query": [
								{
									"key": "name",
									"value": "Charlie Shab Bank"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EXCEPTIONS",
			"item": [
				{
					"name": "/banks/{id} - id not a number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/abcdefg",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"abcdefg"
							]
						}
					},
					"response": []
				},
				{
					"name": "/banks?assets= - assets not a number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/getBanks?assets=abc,def,ghi",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"getBanks"
							],
							"query": [
								{
									"key": "assets",
									"value": "abc,def,ghi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/banks?name= -",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1b3c1b-02b6-4280-960d-8eee97ca6591",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"try {",
									"    ",
									"    // Pasrse the API response object",
									"    // -------------------------------------------------------------",
									"    obj = JSON.parse(pm.response.text());",
									"    ",
									"    ",
									"    // HTTP header 302 ",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status code is 302\", function() {",
									"        pm.response.to.have.status(302);",
									"    });",
									"    ",
									"    // Redirect url was provided",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check redirect url\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Links\");",
									"    });",
									"    ",
									"    if (obj[\"Links\"][\"self\"].length < 10) {",
									"    ",
									"        tests[\"Check redirect url available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    if (obj[\"Links\"][\"self\"].match(/(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g) === null) {",
									"    ",
									"        tests[\"Check redirect url is valid\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check redirect url is valid\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // Check payment ID",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check PaymentId\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"PaymentId\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"PaymentId\"].length < 1) {",
									"    ",
									"        tests[\"Check PaymentId available\"] = fail;",
									"    }",
									"    else {",
									"         tests[\"Check PaymentId available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check Status",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check Status\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"Status\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"Status\"] != \"AcceptedTechnicalValidation\") {",
									"    ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check Status is AcceptedTechnicalValidation\"] = pass;",
									"    }",
									"    ",
									"    // Check the Date header to be in RFC7231 format",
									"    // -------------------------------------------------------------",
									"    // console.log(\"date = \" + postman.getResponseHeader(\"Date\"));",
									"    ",
									"    function dateTestRFC7231(input){",
									"    ",
									"    \t// Example input: Tue, 22 May 2018 11:14:57 GMT",
									"    ",
									"    \tregex = /(?:(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\\s+)?(0[1-9]|[1-2]?[0-9]|3[01])\\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+(19[0-9]{2}|[2-9][0-9]{3})\\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\\s+([-\\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    if (!dateTestRFC7231(postman.getResponseHeader(\"Date\"))) {",
									"    ",
									"        tests[\"Check header Date format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check header Date format\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    // Check CreationDateTime",
									"    // -------------------------------------------------------------",
									"    pm.test(\"Check CreationDateTime\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"CreationDateTime\");",
									"    });",
									"    ",
									"    if (obj[\"Data\"][\"CreationDateTime\"].length < 10) {",
									"    ",
									"        tests[\"Check CreationDateTime available\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime available\"] = pass;",
									"    }",
									"    ",
									"    ",
									"    function dateTestISO8601(input){",
									"    ",
									"    \t// Example input: 2017-06-05T15:15:13+00:00",
									"    ",
									"    \tregex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2})[+-](\\d{2})\\:(\\d{2})/gm;",
									"    ",
									"    \tif (regex.exec(input) !== null) {",
									"    \t\treturn true;",
									"    \t} else {",
									"    \t\treturn false;",
									"    \t}",
									"    }",
									"    ",
									"    ",
									"    if (dateTestISO8601(obj[\"Data\"][\"CreationDateTime\"])) {",
									"    ",
									"        tests[\"Check CreationDateTime format\"] = fail;",
									"    }",
									"    else {",
									"        ",
									"        tests[\"Check CreationDateTime format\"] = pass;",
									"    }",
									"    ",
									"    // Check other expected fields",
									"    // -------------------------------------------------------------",
									"    expectedFields = [",
									"        ",
									"        \"InstructionIdentification\",",
									"        \"EndToEndIdentification\",",
									"            \"Amount\",",
									"            \"Currency\",",
									"        \"DebtorAgent\",",
									"        \"DebtorAccount\",",
									"        \"CreditorAgent\",",
									"        \"CreditorAccount\",",
									"        \"RemittanceInformation\",",
									"        \"PaymentContextCode\",",
									"        \"MerchantCategoryCode\",",
									"        \"MerchantCustomerIdentification\",",
									"    ];",
									"    ",
									"    for (i = 0; i < expectedFields.length; i++){",
									"        ",
									"        pm.test(\"Check \" + expectedFields[i], function () {",
									"            pm.expect(pm.response.text()).to.include( expectedFields[i] );",
									"        });",
									"    }",
									"    ",
									"    // Check for the x-fapi-interaction-id",
									"    // -------------------------------------------------------------",
									"    // If we send a x-fapi-iteraction-id header, the response from ",
									"    // the API should send it back",
									"    ",
									"    if (request.headers[\"x-fapi-interaction-id\"] !== null) {",
									"    ",
									"        // console.log('x-fapi-interaction-id | sent ' + request.headers[\"x-fapi-interaction-id\"]);",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        }); ",
									"        ",
									"        pm.test(\"Check for x-fapi-interaction-id header value\", function () {",
									"            pm.response.to.be.header(\"x-fapi-interaction-id \", pm.globals.get(\"env_x-fapi-interaction-id\"));",
									"        }); ",
									"    }",
									"    ",
									"    ",
									"    ",
									"    // -------------------------------------------------------------",
									"    // Set variables for next requests",
									"    // -------------------------------------------------------------",
									"    pm.globals.set(\"env_paymentid\", obj[\"Data\"][\"PaymentId\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_InstructionIdentification\", obj[\"Data\"][\"Initiation\"][\"InstructionIdentification\"]);",
									"    pm.globals.set(\"env_EndToEndIdentification\", obj[\"Data\"][\"Initiation\"][\"EndToEndIdentification\"]);",
									"    pm.globals.set(\"env_Amount\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Amount\"]);",
									"    pm.globals.set(\"env_Currency\", obj[\"Data\"][\"Initiation\"][\"InstructedAmount\"][\"Currency\"]);",
									"    pm.globals.set(\"env_DebtorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_DebtorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_DebtorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"DebtorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_CreditorAgent_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAgent\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Identification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Identification\"]);",
									"    pm.globals.set(\"env_CreditorAccount_Name\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"Name\"]);",
									"    pm.globals.set(\"env_CreditorAccount_SecondaryIdentification\", obj[\"Data\"][\"Initiation\"][\"CreditorAccount\"][\"SecondaryIdentification\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Unstructured\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Unstructured\"]);",
									"    pm.globals.set(\"env_RemittanceInformation_Reference\", obj[\"Data\"][\"Initiation\"][\"RemittanceInformation\"][\"Reference\"]);",
									"    pm.globals.set(\"env_Risk_PaymentContextCode\", obj[\"Risk\"][\"PaymentContextCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCategoryCode\", obj[\"Risk\"][\"MerchantCategoryCode\"]);",
									"    pm.globals.set(\"env_Risk_MerchantCustomerIdentification\", obj[\"Risk\"][\"MerchantCustomerIdentification\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_AddressLine\", obj[\"Risk\"][\"DeliveryAddress\"][\"AddressLine\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_StreetName\", obj[\"Risk\"][\"DeliveryAddress\"][\"StreetName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_BuildingNumber\", obj[\"Risk\"][\"DeliveryAddress\"][\"BuildingNumber\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_PostCode\", obj[\"Risk\"][\"DeliveryAddress\"][\"PostCode\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_TownName\", obj[\"Risk\"][\"DeliveryAddress\"][\"TownName\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_CountrySubDivision\", obj[\"Risk\"][\"DeliveryAddress\"][\"CountrySubDivision\"]);",
									"    pm.globals.set(\"env_Risk_DeliveryAddress_Country\", obj[\"Risk\"][\"DeliveryAddress\"][\"Country\"]);",
									"",
									"}",
									"catch(err) {",
									"    tests[\"Parse response JSON or tests initialisation\"] = fail;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3c3f0b5-d15f-490c-b947-1fc50afa39aa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Initiation\": {\n      \"EndToEndIdentification\": \"FRESCO.21302.GFX.20\",\n      \"InstructedAmount\": {\n        \"Amount\": \"165.00\",\n        \"Currency\": \"GBP\"\n      },\n      \"CreditorAccount\": {\n        \"SchemeName\": \"SortCodeAccountNumber\",\n        \"Identification\": \"08080021325698\",\n        \"Name\": \"ACME Inc\",\n        \"SecondaryIdentification\": \"0002\"\n      },\n      \"RemittanceInformation\": {\n        \"Reference\": \"FRESCO-101\",\n        \"Unstructured\": \"Internal ops code 5120101\"\n      }\n    }\n  },\n  \"Risk\": {\n    \"PaymentContextCode\": \"EcommerceGoods\",\n    \"MerchantCategoryCode\": \"5967\",\n    \"MerchantCustomerIdentification\": \"053598653254\",\n    \"DeliveryAddress\": {\n      \"AddressLine\": [\n        \"Flat 7\",\n        \"Acacia Lodge\"\n      ],\n      \"StreetName\": \"Acacia Avenue\",\n      \"BuildingNumber\": \"27\",\n      \"PostCode\": \"GU31 2ZZ\",\n      \"TownName\": \"Sparsholt\",\n      \"CountrySubDivision\": [\n        \"Wessex\"\n      ],\n      \"Country\": \"UK\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{host_banks}}/Banks/getBanks?name=*",
							"host": [
								"{{host_banks}}"
							],
							"path": [
								"Banks",
								"getBanks"
							],
							"query": [
								{
									"key": "name",
									"value": "*"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}